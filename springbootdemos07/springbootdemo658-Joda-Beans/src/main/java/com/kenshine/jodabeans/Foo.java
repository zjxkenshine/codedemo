package com.kenshine.jodabeans;

import org.joda.beans.Bean;
import org.joda.beans.MetaBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * @author by kenshine
 * @Classname Foo
 * @Description 测试Bean生成
 * @Date 2024-01-08 13:05
 * @modified By：
 * @version: 1.0$
 */
@BeanDefinition
public class Foo implements Bean {

    @PropertyDefinition
    private String forename;

    @PropertyDefinition(validate = "notNull")
    private String surname;

    @PropertyDefinition
    private Address address;

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code Foo}.
     * @return the meta-bean, not null
     */
    public static Foo.Meta meta() {
        return Foo.Meta.INSTANCE;
    }

    static {
        MetaBean.register(Foo.Meta.INSTANCE);
    }

    @Override
    public Foo.Meta metaBean() {
        return Foo.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the forename.
     * @return the value of the property
     */
    public String getForename() {
        return forename;
    }

    /**
     * Sets the forename.
     * @param forename  the new value of the property
     */
    public void setForename(String forename) {
        this.forename = forename;
    }

    /**
     * Gets the the {@code forename} property.
     * @return the property, not null
     */
    public final Property<String> forename() {
        return metaBean().forename().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the surname.
     * @return the value of the property, not null
     */
    public String getSurname() {
        return surname;
    }

    /**
     * Sets the surname.
     * @param surname  the new value of the property, not null
     */
    public void setSurname(String surname) {
        JodaBeanUtils.notNull(surname, "surname");
        this.surname = surname;
    }

    /**
     * Gets the the {@code surname} property.
     * @return the property, not null
     */
    public final Property<String> surname() {
        return metaBean().surname().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the address.
     * @return the value of the property
     */
    public Address getAddress() {
        return address;
    }

    /**
     * Sets the address.
     * @param address  the new value of the property
     */
    public void setAddress(Address address) {
        this.address = address;
    }

    /**
     * Gets the the {@code address} property.
     * @return the property, not null
     */
    public final Property<Address> address() {
        return metaBean().address().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public Foo clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            Foo other = (Foo) obj;
            return JodaBeanUtils.equal(getForename(), other.getForename()) &&
                    JodaBeanUtils.equal(getSurname(), other.getSurname()) &&
                    JodaBeanUtils.equal(getAddress(), other.getAddress());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getForename());
        hash = hash * 31 + JodaBeanUtils.hashCode(getSurname());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAddress());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("Foo{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("forename").append('=').append(JodaBeanUtils.toString(getForename())).append(',').append(' ');
        buf.append("surname").append('=').append(JodaBeanUtils.toString(getSurname())).append(',').append(' ');
        buf.append("address").append('=').append(JodaBeanUtils.toString(getAddress())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code Foo}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code forename} property.
         */
        private final MetaProperty<String> forename = DirectMetaProperty.ofReadWrite(
                this, "forename", Foo.class, String.class);
        /**
         * The meta-property for the {@code surname} property.
         */
        private final MetaProperty<String> surname = DirectMetaProperty.ofReadWrite(
                this, "surname", Foo.class, String.class);
        /**
         * The meta-property for the {@code address} property.
         */
        private final MetaProperty<Address> address = DirectMetaProperty.ofReadWrite(
                this, "address", Foo.class, Address.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "forename",
                "surname",
                "address");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 467061063:  // forename
                    return forename;
                case -1852993317:  // surname
                    return surname;
                case -1147692044:  // address
                    return address;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends Foo> builder() {
            return new DirectBeanBuilder<>(new Foo());
        }

        @Override
        public Class<? extends Foo> beanType() {
            return Foo.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code forename} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> forename() {
            return forename;
        }

        /**
         * The meta-property for the {@code surname} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> surname() {
            return surname;
        }

        /**
         * The meta-property for the {@code address} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Address> address() {
            return address;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 467061063:  // forename
                    return ((Foo) bean).getForename();
                case -1852993317:  // surname
                    return ((Foo) bean).getSurname();
                case -1147692044:  // address
                    return ((Foo) bean).getAddress();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 467061063:  // forename
                    ((Foo) bean).setForename((String) newValue);
                    return;
                case -1852993317:  // surname
                    ((Foo) bean).setSurname((String) newValue);
                    return;
                case -1147692044:  // address
                    ((Foo) bean).setAddress((Address) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

        @Override
        protected void validate(Bean bean) {
            JodaBeanUtils.notNull(((Foo) bean).surname, "surname");
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
