package com.kenshine.license3j;

import javax0.license3j.License;
import javax0.license3j.io.IOFormat;
import javax0.license3j.io.LicenseReader;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;

/**
 * @author by kenshine
 * @Classname License3jTest
 * @Description 使用测试
 * @Date 2024-03-11 8:46
 * @modified By：
 * @version: 1.0$
 */
@Slf4j
public class License3jTest {

    /**
     * 使用示例
     */
    public static void main(String[] args) {
        License license = new License();
        try {
            // 加载license文件
            license= new LicenseReader("springbootdemo741-License3j/src/main/resources/license.base64")
                    .read(IOFormat.BASE64);
        } catch (IOException e) {
            log.error("Error reading license file " + e);
        }

        // 将公钥编码到应用程序中 License3jRepl生成
        byte [] digest = new byte[] {
                (byte)0x5E,
                (byte)0x25, (byte)0x59, (byte)0x1D, (byte)0x1A, (byte)0x0E, (byte)0x29, (byte)0x5B, (byte)0x1D,
                (byte)0x99, (byte)0x6C, (byte)0x12, (byte)0x28, (byte)0xD8, (byte)0xA8, (byte)0xE3, (byte)0x8A,
                (byte)0xDA, (byte)0xFA, (byte)0x52, (byte)0x06, (byte)0xCE, (byte)0x50, (byte)0x95, (byte)0x58,
                (byte)0x56, (byte)0x54, (byte)0x2A, (byte)0xAA, (byte)0xC9, (byte)0x1D, (byte)0xD0, (byte)0x16,
                (byte)0xB1, (byte)0x64, (byte)0x10, (byte)0x3E, (byte)0x56, (byte)0x43, (byte)0xB8, (byte)0xBE,
                (byte)0xE5, (byte)0x55, (byte)0x62, (byte)0xAB, (byte)0x0B, (byte)0x74, (byte)0xE3, (byte)0x7A,
                (byte)0xC1, (byte)0x5D, (byte)0x15, (byte)0x85, (byte)0xBE, (byte)0x8B, (byte)0x35, (byte)0xBA,
                (byte)0xD9, (byte)0x92, (byte)0xE8, (byte)0x27, (byte)0xCD, (byte)0xF0, (byte)0xC6,
        };
        byte [] key = new byte[] {
                (byte)0x52,
                (byte)0x53, (byte)0x41, (byte)0x00, (byte)0x30, (byte)0x81, (byte)0x9F, (byte)0x30, (byte)0x0D,
                (byte)0x06, (byte)0x09, (byte)0x2A, (byte)0x86, (byte)0x48, (byte)0x86, (byte)0xF7, (byte)0x0D,
                (byte)0x01, (byte)0x01, (byte)0x01, (byte)0x05, (byte)0x00, (byte)0x03, (byte)0x81, (byte)0x8D,
                (byte)0x00, (byte)0x30, (byte)0x81, (byte)0x89, (byte)0x02, (byte)0x81, (byte)0x81, (byte)0x00,
                (byte)0xA3, (byte)0x27, (byte)0x26, (byte)0x4E, (byte)0x80, (byte)0x45, (byte)0x6E, (byte)0x9E,
                (byte)0x62, (byte)0x77, (byte)0xF6, (byte)0x81, (byte)0xF3, (byte)0xEB, (byte)0x6D, (byte)0x7B,
                (byte)0x6D, (byte)0x32, (byte)0x76, (byte)0x4B, (byte)0x22, (byte)0xA9, (byte)0xFE, (byte)0x6B,
                (byte)0x1B, (byte)0xF8, (byte)0x59, (byte)0xC0, (byte)0x8C, (byte)0x1E, (byte)0x00, (byte)0x71,
                (byte)0x77, (byte)0xF2, (byte)0xD6, (byte)0x1E, (byte)0x99, (byte)0x67, (byte)0xC0, (byte)0x1E,
                (byte)0x89, (byte)0xF4, (byte)0x1F, (byte)0x18, (byte)0xC1, (byte)0x84, (byte)0x82, (byte)0x0A,
                (byte)0x53, (byte)0x9F, (byte)0x89, (byte)0x6D, (byte)0x54, (byte)0xEA, (byte)0x3F, (byte)0x46,
                (byte)0x67, (byte)0x2E, (byte)0x8D, (byte)0x00, (byte)0x38, (byte)0x64, (byte)0xAB, (byte)0xBC,
                (byte)0xBE, (byte)0xD8, (byte)0x64, (byte)0x5C, (byte)0x3D, (byte)0x44, (byte)0x6B, (byte)0xA7,
                (byte)0xBA, (byte)0xE0, (byte)0x2A, (byte)0x2C, (byte)0x68, (byte)0x53, (byte)0x9C, (byte)0x04,
                (byte)0x78, (byte)0xD9, (byte)0x83, (byte)0x45, (byte)0x5C, (byte)0xC5, (byte)0x99, (byte)0x96,
                (byte)0xFB, (byte)0x18, (byte)0x5A, (byte)0xF3, (byte)0x9B, (byte)0x1E, (byte)0x0C, (byte)0x20,
                (byte)0x1F, (byte)0xB4, (byte)0x31, (byte)0x33, (byte)0xAE, (byte)0x3A, (byte)0xA2, (byte)0x31,
                (byte)0x35, (byte)0xDB, (byte)0x05, (byte)0x35, (byte)0x63, (byte)0x62, (byte)0x25, (byte)0x35,
                (byte)0x32, (byte)0xA4, (byte)0xF2, (byte)0xAF, (byte)0x36, (byte)0x94, (byte)0xBD, (byte)0xFE,
                (byte)0xD3, (byte)0x4C, (byte)0xBE, (byte)0x09, (byte)0xB9, (byte)0xC7, (byte)0x4A, (byte)0xD1,
                (byte)0x02, (byte)0x03, (byte)0x01, (byte)0x00, (byte)0x01,
        };
        // 检查许可证是否已正确签名
        if( !license.isOK(key) ){
            log.error("Lisence not signed");
            return;
        }
        // 获取一个功能，并从功能类型特定的数据
        System.out.println("Validated!");
        int id = license.get("id").getInt();
        String name = license.get("name").getString();
        System.out.println(id);
        System.out.println(name);
    }
}
